/*************************
 * Check and Radio Items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly


// unchecked
@each $s,$un in ('','-unchecked'),
                  (':hover', '-unchecked-hover'),
                  (':active', '-unchecked-active'),
                  (':backdrop', '-unchecked-backdrop'),
                  (':insensitive', '-unchecked-insensitive'),
                  (':insensitive:backdrop', '-unchecked-backdrop-insensitive') {
  .check#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/checkbox#{$un}.png"),url("assets/checkbox#{$un}@2.png")), -gtk-scaled(url("assets/checkbox#{$un}-dark.png"),url("assets/checkbox#{$un}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/checkbox#{$un}.png"),url("assets/checkbox#{$un}@2.png")), -gtk-scaled(url("assets/checkbox#{$un}-dark.png"),url("assets/checkbox#{$un}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
  .radio#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/radio#{$un}.png"),url("assets/radio#{$un}@2.png")), -gtk-scaled(url("assets/radio#{$un}-dark.png"),url("assets/radio#{$un}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/radio#{$un}.png"),url("assets/radio#{$un}@2.png")), -gtk-scaled(url("assets/radio#{$un}-dark.png"),url("assets/radio#{$un}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
}

// checked
@each $s,$ch in (':checked', '-checked'),
                  (':checked:hover', '-checked-hover'),
                  (':checked:active', '-checked-active'),
                  (':checked:backdrop', '-checked-backdrop'),
                  (':checked:insensitive', '-checked-insensitive'),
                  (':checked:insensitive:backdrop', '-checked-insensitive-backdrop') {
  .check#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/checkbox#{$ch}.png"),url("assets/checkbox#{$ch}@2.png")), -gtk-scaled(url("assets/checkbox#{$ch}-dark.png"),url("assets/checkbox#{$ch}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/checkbox#{$ch}.png"),url("assets/checkbox#{$ch}@2.png")), -gtk-scaled(url("assets/checkbox#{$ch}-dark.png"),url("assets/checkbox#{$ch}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
  .radio#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/radio#{$ch}.png"),url("assets/radio#{$ch}@2.png")), -gtk-scaled(url("assets/radio#{$ch}-dark.png"),url("assets/radio#{$ch}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/radio#{$ch}.png"),url("assets/radio#{$ch}@2.png")), -gtk-scaled(url("assets/radio#{$ch}-dark.png"),url("assets/radio#{$ch}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
}

// mixed
@each $s,$mx in (':inconsistent', '-mixed'),
                  (':inconsistent:hover', '-mixed-hover'),
                  (':inconsistent:active', '-mixed-active'),
                  (':inconsistent:backdrop', '-mixed-backdrop'),
                  (':inconsistent:insensitive', '-mixed-insensitive'),
                  (':inconsistent:insensitive:backdrop', '-mixed-insensitive-backdrop') {
  .check#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/checkbox#{$mx}.png"),url("assets/checkbox#{$mx}@2.png")), -gtk-scaled(url("assets/checkbox#{$mx}-dark.png"),url("assets/checkbox#{$mx}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/checkbox#{$mx}.png"),url("assets/checkbox#{$mx}@2.png")), -gtk-scaled(url("assets/checkbox#{$mx}-dark.png"),url("assets/checkbox#{$mx}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
  .radio#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/radio#{$mx}.png"),url("assets/radio#{$mx}@2.png")), -gtk-scaled(url("assets/radio#{$mx}-dark.png"),url("assets/radio#{$mx}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/radio#{$mx}.png"),url("assets/radio#{$mx}@2.png")), -gtk-scaled(url("assets/radio#{$mx}-dark.png"),url("assets/radio#{$mx}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
}

// unchecked:selected
@each $s,$un in (':selected','-unchecked'),
                  (':hover:selected', '-unchecked-hover'),
                  (':active:selected', '-unchecked-active'),
                  (':backdrop:selected', '-unchecked-backdrop'),
                  (':insensitive:selected', '-unchecked-insensitive'),
                  (':insensitive:backdrop:selected', '-unchecked-backdrop-insensitive') {
  .check#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/selected-checkbox#{$un}.png"),url("assets/selected-checkbox#{$un}@2.png")), -gtk-scaled(url("assets/selected-checkbox#{$un}-dark.png"),url("assets/selected-checkbox#{$un}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/selected-checkbox#{$un}.png"),url("assets/selected-checkbox#{$un}@2.png")), -gtk-scaled(url("assets/selected-checkbox#{$un}-dark.png"),url("assets/selected-checkbox#{$un}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
  .radio#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/selected-radio#{$un}.png"),url("assets/selected-radio#{$un}@2.png")), -gtk-scaled(url("assets/selected-radio#{$un}-dark.png"),url("assets/selected-radio#{$un}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/selected-radio#{$un}.png"),url("assets/selected-radio#{$un}@2.png")), -gtk-scaled(url("assets/selected-radio#{$un}-dark.png"),url("assets/selected-radio#{$un}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
}

// checked:selected
@each $s,$ch in (':checked:selected', '-checked'),
                  (':checked:hover:selected', '-checked-hover'),
                  (':checked:active:selected', '-checked-active'),
                  (':checked:backdrop:selected', '-checked-backdrop'),
                  (':checked:insensitive:selected', '-checked-insensitive'),
                  (':checked:insensitive:backdrop:selected', '-checked-insensitive-backdrop') {
  .check#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/selected-checkbox#{$ch}.png"),url("assets/selected-checkbox#{$ch}@2.png")), -gtk-scaled(url("assets/selected-checkbox#{$ch}-dark.png"),url("assets/selected-checkbox#{$ch}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/selected-checkbox#{$ch}.png"),url("assets/selected-checkbox#{$ch}@2.png")), -gtk-scaled(url("assets/selected-checkbox#{$ch}-dark.png"),url("assets/selected-checkbox#{$ch}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
  .radio#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/selected-radio#{$ch}.png"),url("assets/selected-radio#{$ch}@2.png")), -gtk-scaled(url("assets/selected-radio#{$ch}-dark.png"),url("assets/selected-radio#{$ch}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/selected-radio#{$ch}.png"),url("assets/selected-radio#{$ch}@2.png")), -gtk-scaled(url("assets/selected-radio#{$ch}-dark.png"),url("assets/selected-radio#{$ch}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
}


// mixed:selected
@each $s,$mx in (':inconsistent:selected', '-mixed'),
                  (':inconsistent:hover:selected', '-mixed-hover'),
                  (':inconsistent:active:selected', '-mixed-active'),
                  (':inconsistent:backdrop:selected', '-mixed-backdrop'),
                  (':inconsistent:insensitive:selected', '-mixed-insensitive'),
                  (':inconsistent:insensitive:backdrop:selected', '-mixed-insensitive-backdrop') {
  .check#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/selected-checkbox#{$mx}.png"),url("assets/selected-checkbox#{$mx}@2.png")), -gtk-scaled(url("assets/selected-checkbox#{$mx}-dark.png"),url("assets/selected-checkbox#{$mx}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/selected-checkbox#{$mx}.png"),url("assets/selected-checkbox#{$mx}@2.png")), -gtk-scaled(url("assets/selected-checkbox#{$mx}-dark.png"),url("assets/selected-checkbox#{$mx}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
  .radio#{$s}{
    background: if($variant == 'light', -gtk-scaled(url("assets/selected-radio#{$mx}.png"),url("assets/selected-radio#{$mx}@2.png")), -gtk-scaled(url("assets/selected-radio#{$mx}-dark.png"),url("assets/selected-radio#{$mx}-dark@2.png")));
    -gtk-icon-source: if($variant == 'light', -gtk-scaled(url("assets/selected-radio#{$mx}.png"),url("assets/selected-radio#{$mx}@2.png")), -gtk-scaled(url("assets/selected-radio#{$mx}-dark.png"),url("assets/selected-radio#{$mx}-dark@2.png")));
    -gtk-icon-shadow: none;
  }
}


// selection-mode unchecked
@each $s,$un in ('','-unchecked'),
                  (':hover', '-unchecked-hover'),
                  (':active', '-unchecked-active'),
                  (':backdrop', '-unchecked-backdrop'),
                  (':insensitive', '-unchecked-insensitive'),
                  (':insensitive:backdrop', '-unchecked-backdrop-insensitive') {
  .view.content-view.check#{$s}{
    background: -gtk-scaled(url("assets/selection-mode-checkbox#{$un}.png"),url("assets/checkbox#{$un}@2.png"));
    -gtk-icon-source: -gtk-scaled(url("assets/selection-mode-checkbox#{$un}.png"),url("assets/checkbox#{$un}@2.png"));
    -gtk-icon-shadow: none;
  }
  .view.content-view.radio#{$s}{
    background: -gtk-scaled(url("assets/selection-mode-radio#{$un}.png"),url("assets/radio#{$un}@2.png"));
    -gtk-icon-source: -gtk-scaled(url("assets/selection-mode-radio#{$un}.png"),url("assets/radio#{$un}@2.png"));
    -gtk-icon-shadow: none;
  }
}

// selection-mode checked
@each $s,$ch in ('','-checked'),
                  (':hover', '-checked-hover'),
                  (':active', '-checked-active'),
                  (':backdrop', '-checked-backdrop'),
                  (':insensitive', '-checked-insensitive'),
                  (':insensitive:backdrop', '-checked-backdrop-insensitive') {
  .view.content-view.check#{$s}{
    background: -gtk-scaled(url("assets/selection-mode-checkbox#{$ch}.png"),url("assets/checkbox#{$ch}@2.png"));
    -gtk-icon-source: -gtk-scaled(url("assets/selection-mode-checkbox#{$ch}.png"),url("assets/checkbox#{$ch}@2.png"));
    -gtk-icon-shadow: none;
  }
  .view.content-view.radio#{$s}{
    background: -gtk-scaled(url("assets/selection-mode-radio#{$ch}.png"),url("assets/radio#{$ch}@2.png"));
    -gtk-icon-source: -gtk-scaled(url("assets/selection-mode-radio#{$ch}.png"),url("assets/radio#{$ch}@2.png"));
    -gtk-icon-shadow: none;
  }
}


// Style

.check.text-button, .radio.text-button,
checkbutton.text-button, radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: 2px 0;
  outline-offset: 0;

  label:not(:only-child) {
    &:first-child { margin-left: 4px; }
    &:last-child { margin-right: 4px; }
  }
}

check,
.check,
radio,
.radio {
  margin: 0 4px;

  &:only-child { margin: 0; }

  min-height: 14px;
  min-width: 14px;
  border: 1px solid;

  @include button(normal, $edge: $shadow_color);

  &:hover { @include button(hover, $edge: $shadow_color); }
  &:active { @include button(active); }
  &:disabled { @include button(insensitive); }
  &:backdrop {
    @include button(backdrop);

    transition: $backdrop_transition;

    &:disabled { @include button(backdrop-insensitive); }
  }

  @if $variant == 'light' {
    // the borders of the light variant versions of checks and radios are too similar in luminosity to the selected background
    // color, hence we need special casing.
    row:selected & { border-color: $selected_borders_color; }
  }

  .osd & {
    @include button(osd);

    &:hover { @include button(osd); }
    &:active { @include button(osd-active); }
    &:backdrop { @include button(osd-backdrop); }
    &:disabled { @include button(osd-insensitive); }
  }

  .menu menuitem &,
  menu menuitem & {
    margin: 0; // this is a workaround for a menu check/radio size allocation issue

    &, &:hover, &:disabled { //FIXME use button reset mixin
      min-height: 14px;
      min-width: 14px;
      background-image: none;
      background-color: transparent;
      box-shadow: none;
      -gtk-icon-shadow: none;
      color: inherit;
      border-color: currentColor;
      animation: none;
    }
  }
}

%check,
check {
  border-radius: 3px;

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/check-symbolic.svg")),
                                      -gtk-recolor(url("assets/check-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }
}

%radio,
radio {
  border-radius: 100%;

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/scalable/bullet-symbolic.svg")),
                                      -gtk-recolor(url("assets/bullet-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }
}

// let's animate things
@keyframes check_check {
  from { -gtk-icon-transform: translate(6px, -3px) rotate(-45deg) scaleY(0.2) rotate(45deg) scaleX(0); }
  to { -gtk-icon-transform: unset; }
}

@keyframes check_radio {
  from { -gtk-icon-transform: scale(0); }
  to { -gtk-icon-transform: unset; }
}

@keyframes check_indeterminate {
  from { -gtk-icon-transform: scale(0, 1); }
  to { -gtk-icon-transform: unset; }
}

check:not(:indeterminate):checked { animation: check_check 400ms; }

radio:not(:indeterminate):checked { animation: check_radio 400ms; }

check:indeterminate:checked, radio:indeterminate:checked { animation: check_indeterminate 400ms; }

// no animations in menus
menu menuitem {
  check:not(:indeterminate):checked,
  radio:not(:indeterminate):checked,
  check:indeterminate:checked:active,
  radio:indeterminate:checked { animation: none; }
}

treeview.view check,
treeview.view radio {
  &:selected {
    &:focus, & {
      color: $fg_color;

      @if $variant == 'light' { border-color: $selected_borders_color; }
    }

    &:disabled {
      color: $insensitive_fg_color;

      &:backdrop { color: $backdrop_insensitive_color; }
    }
  }

  &:backdrop { &:selected, & { color: $backdrop_fg_color; }}
}

treeview.view radio:selected { &:focus, & { @extend %radio; }} // This is a workaround